import { KernelF32 } from './kernel';
/**
 * Kernel providing random values in [-1,+1] for two components. The first sample is fixed at [0.0, 0.0] since the
 * kernel is intended for use of NDC offsets.
 *
 * Example for using this kernel:
 * ```
 * this._aaKernel.size = multiFrameNumber; // regenerates when multi-frame number changes
 * let ndcOffset = this._aaKernel.value(frameNumber);
 * ndcOffset[0] = ndcOffset[0] / this._intermediateFBO.width;
 * ndcOffset[1] = ndcOffset[1] / this._intermediateFBO.height;
 * ```
 */
export declare class RandomSquareKernel extends KernelF32 {
    /**
     * RandomSquareKernel is fixed to one-dimension (x-axis) and 2-components per sample.
     * @param width - Width of the kernel along its x-axis.
     */
    constructor(width: GLsizei);
    /**
     * Generates for each sample random components in [-1.0, +1.0] except for the first.
     */
    protected generate(): void;
    /**
     * @override
     * Seems to only work if the getter of this kernels width setter is redefined here.
     */
    get width(): GLsizei;
    /**
     * Changes the size of the kernel and triggers regeneration of all values.
     */
    set width(width: GLsizei);
}
