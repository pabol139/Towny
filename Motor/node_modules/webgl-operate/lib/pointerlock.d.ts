/**
 * Utility class providing simplified access to the clients pointer lock API.
 */
export declare class PointerLock {
    /**
     * Cached exit call of the clients specific pointer lock API.
     */
    protected static _exit: () => void;
    /**
     * Cached request call of the clients specific pointer API.
     */
    protected static _request: (element: HTMLElement) => void;
    /**
     * Cached element call returning the fullscreen element specific to the clients fullscreen API.
     */
    protected static _element: () => HTMLElement;
    /**
     * Query and cache the client specific pointer lock API.
     */
    protected static queryAndCacheAPI(): void;
    /**
     * Returns whether or not a pointer lock element exists, indicating if pointer lock is active or not.
     */
    static active(element?: HTMLElement): boolean;
    /**
     * Requests pointer lock for a given element. If another element is already in pointer lock, it is unlocked
     * first. The function considers various platform specific pointer lock interfaces, i.e., native, moz, and webkit.
     * @param element - Element to toggle pointer lock state of.
     */
    static request(element: HTMLElement, callback?: () => void): void;
    /**
     * Exit pointer lock. The function considers various platform specific pointer lock interfaces, i.e., native, moz,
     * and webkit.
     */
    static exit(): void;
}
