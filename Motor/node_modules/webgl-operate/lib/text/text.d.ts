/**
 * The text object is intended as character sequence manipulation interface. A text can be referenced by multiple labels
 * for rendering and interaction. E.g., a single text could be rendered multiple times at different locations or using
 * different font faces, alignments, etc. The text object will probably increase in complexity when additional features
 * such as text formatting (bold, italic, varying size), (multi)cursor, (multi)selection, etc. will be added.
 */
export declare class Text {
    static readonly DEFAULT_LINE_FEED = "\n";
    /** @see {@link text} */
    protected _text: string;
    /** @see {@link lineFeed} */
    protected _lineFeed: string;
    /** @see {@link altered} */
    protected _altered: boolean;
    /**
     * Constructs a Text to be used for a Label.
     * @param text - the actual content of this Text.
     * @param lineFeed - char for lineFeed, default is LF.
     */
    constructor(text?: string, lineFeed?: string);
    /**
     * Length of the text, i.e., number of characters within the text.
     */
    get length(): number;
    /**
     * Returns the character at the specified index.
     * @param index - The zero-based index of the desired character.
     * @returns character at the specified index
     */
    charAt(index: number): string;
    /**
     * Returns the Unicode value (codepoint) of the character at the specified location.
     * @param index - The zero-based index of the desired character.
     * @returns - Codepoint of the character at given index or NaN, if no character exists at index.
     */
    charCodeAt(index: number): number;
    /**
     * Text that is to be rendered.
     */
    set text(text: string);
    get text(): string;
    /**
     * Character that is to be used for Line feed.
     */
    set lineFeed(lineFeed: string);
    get lineFeed(): string;
    /**
     * Intended for resetting alteration status.
     */
    set altered(altered: boolean);
    get altered(): boolean;
}
